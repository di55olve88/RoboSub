#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>

#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main( int argc, char** argv )
{
	if( argc != 2)
	{
		cout <<" Usage: display_image ImageToLoadAndDisplay" << endl;
		return -1;
	}

	Mat image, segmented7, segmented5, segmented3, hsv, hue, tmp;
	image = imread(argv[1], CV_LOAD_IMAGE_COLOR);   // Read the file
	
	pyrDown(image, tmp);
	pyrDown(tmp, tmp);
	pyrDown(tmp, tmp);

	imwrite("marker_small.jpg", tmp);
	cvtColor(tmp, hsv, CV_BGR2HSV);

	/// Use only the Hue value
  	hue.create( hsv.size(), hsv.depth() );
  	int ch[] = { 0, 0 };
  	mixChannels( &hsv, 1, &hue, 1, ch, 1 );
	
	if(! image.data )                              // Check for invalid input
	{
		cout <<  "Could not open or find the image" << std::endl ;
		return -1;
	}
	
	blur(hue, hue, Size(3,3) );

	adaptiveThreshold(hue, segmented7, 255, CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY, 5, 0);
//	adaptiveThreshold(image, segmented5, 255, CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY, 5, 0);
//	adaptiveThreshold(image,q segmented3, 255, CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY, 3, 0);

	namedWindow( "Display window", WINDOW_AUTOSIZE );// Create a window for display.
	imshow( "Display window", hue );// Show our image inside it.
	imshow("Segmented with block size 7", segmented7);
//	imshow("Segmented with block size 5", segmented5);
//	imshow("Segmented with block size 3", segmented3);	

	waitKey(0);                                          // Wait for a keystroke in the window
	return 0;
}
